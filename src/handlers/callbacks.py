from telegram import Update
from telegram.ext import ContextTypes
from src.handlers.converters import convert_image
from src.handlers.document_converter import convert_document
from src.handlers.video_converter import convert_video
from src.keyboards import (
    get_main_keyboard, get_quality_keyboard, 
    get_format_default_keyboard, get_boolean_keyboard,
    get_settings_keyboard, get_format_keyboard,
    get_metadata_keyboard, get_video_format_keyboard
)
from src.handlers.commands import help_command, formats_command, settings_command
from src.config import IMAGES

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle text messages."""
    text = update.message.text

    if text == '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª':
        await update.message.reply_text(
            text=f"{IMAGES['formats']}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª –≤ –æ–¥–Ω–æ–º –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
                 "üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n"
                 "‚Ä¢ JPG\n"
                 "‚Ä¢ PNG\n"
                 "‚Ä¢ WEBP\n\n"
                 "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã:\n"
                 "‚Ä¢ PDF\n"
                 "‚Ä¢ DOCX/DOC\n"
                 "‚Ä¢ TXT\n\n"
                 "üé• –í–∏–¥–µ–æ:\n"
                 "‚Ä¢ MP4\n"
                 "‚Ä¢ AVI\n"
                 "‚Ä¢ MOV\n"
                 "‚Ä¢ MKV\n\n"
                 "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç."
        )
    elif text == '–ü–æ–º–æ—â—å':
        await help_command(update, context)
    elif text == '–§–æ—Ä–º–∞—Ç—ã':
        await formats_command(update, context)
    elif text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        await settings_command(update, context)
    elif text == '–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':
        keyboard = get_quality_keyboard()
        await update.message.reply_text(
            text=f"{IMAGES['settings']}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n"
                 "‚Ä¢ –í—ã—Å–æ–∫–æ–µ - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ\n"
                 "‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ\n"
                 "‚Ä¢ –ù–∏–∑–∫–æ–µ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ",
            reply_markup=keyboard
        )
    elif text == '–§–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é':
        keyboard = get_format_default_keyboard()
        await update.message.reply_text(
            text=f"{IMAGES['settings']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n\n"
                 "–≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –≤—ã –Ω–µ –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π.",
            reply_markup=keyboard
        )
    elif text == 'EXIF –¥–∞–Ω–Ω—ã–µ':
        keyboard = get_boolean_keyboard()
        await update.message.reply_text(
            text=f"{IMAGES['settings']}\n–°–æ—Ö—Ä–∞–Ω—è—Ç—å EXIF –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏?\n\n"
                 "EXIF –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–∫–∞–º–µ—Ä–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç.–¥.)",
            reply_markup=keyboard
        )
    elif text == '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è':
        keyboard = get_boolean_keyboard()
        await update.message.reply_text(
            text=f"{IMAGES['settings']}\n–í–∫–ª—é—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞?\n\n"
                 "–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –º–µ–Ω—å—à–µ, –Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏.",
            reply_markup=keyboard
        )
    elif text == '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å':
        keyboard = get_format_keyboard()
        await update.message.reply_text(
            text=f"{IMAGES['formats']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
            reply_markup=keyboard
        )
    elif text == '–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ':
        keyboard = get_metadata_keyboard()
        await update.message.reply_text(
            text=f"{IMAGES['settings']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:\n\n"
                 "‚Ä¢ iPhone - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ iPhone 15 Pro Max\n"
                 "‚Ä¢ Android - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Samsung S24 Ultra\n"
                 "‚Ä¢ CapCut - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ CapCut",
            reply_markup=keyboard
        )
    elif text == '–û—Ç–º–µ–Ω–∞':
        if 'current_image' in context.user_data:
            del context.user_data['current_image']
        if 'current_document' in context.user_data:
            del context.user_data['current_document']
        if 'current_video' in context.user_data:
            del context.user_data['current_video']
        keyboard = get_main_keyboard()
        await update.message.reply_text(
            text=f"{IMAGES['error']} –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=keyboard
        )
    elif text == '–ù–∞–∑–∞–¥':
        keyboard = get_main_keyboard()
        await update.message.reply_text(
            text=f"{IMAGES['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=keyboard
        )
    elif text in ['JPG', 'PNG', 'WEBP']:
        if context.user_data.get('setting_default_format'):
            context.user_data['settings']['default_format'] = text
            del context.user_data['setting_default_format']
            keyboard = get_settings_keyboard()
            await update.message.reply_text(
                text=f"{IMAGES['success']} –§–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text}",
                reply_markup=keyboard
            )
        else:
            metadata_type = context.user_data.get('metadata_type')
            await convert_image(update, context, text, metadata_type)
            if 'metadata_type' in context.user_data:
                del context.user_data['metadata_type']
    elif text in ['MP4', 'AVI', 'MOV', 'MKV']:
        metadata_type = context.user_data.get('metadata_type')
        await convert_video(update, context, text, metadata_type)
        if 'metadata_type' in context.user_data:
            del context.user_data['metadata_type']
    elif text in ['PDF', 'DOCX', 'TXT']:
        await convert_document(update, context, text)
    elif text in ['–í—ã—Å–æ–∫–æ–µ', '–°—Ä–µ–¥–Ω–µ–µ', '–ù–∏–∑–∫–æ–µ']:
        quality = {'–í—ã—Å–æ–∫–æ–µ': 90, '–°—Ä–µ–¥–Ω–µ–µ': 80, '–ù–∏–∑–∫–æ–µ': 60}
        context.user_data['settings']['image_quality'] = quality[text]
        keyboard = get_settings_keyboard()
        await update.message.reply_text(
            text=f"{IMAGES['success']} –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {text}",
            reply_markup=keyboard
        )
    elif text in ['iPhone', 'Android', 'CapCut']:
        context.user_data['metadata_type'] = text
        if 'current_video' in context.user_data:
            keyboard = get_video_format_keyboard()
        else:
            keyboard = get_format_keyboard()
        await update.message.reply_text(
            text=f"{IMAGES['settings']} –í—ã–±—Ä–∞–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {text}\n"
                 "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
            reply_markup=keyboard
        )
    elif text in ['–í–∫–ª—é—á–∏—Ç—å', '–í—ã–∫–ª—é—á–∏—Ç—å']:
        value = text == '–í–∫–ª—é—á–∏—Ç—å'
        if context.user_data.get('setting_exif'):
            context.user_data['settings']['maintain_exif'] = value
            del context.user_data['setting_exif']
            setting_name = 'EXIF –¥–∞–Ω–Ω—ã—Ö'
        elif context.user_data.get('setting_optimize'):
            context.user_data['settings']['optimize_size'] = value
            del context.user_data['setting_optimize']
            setting_name = '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'
        else:
            return
            
        keyboard = get_settings_keyboard()
        await update.message.reply_text(
            text=f"{IMAGES['success']} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_name} {text.lower()}–Ω–∞",
            reply_markup=keyboard
        ) 